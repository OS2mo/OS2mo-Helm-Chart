# SPDX-FileCopyrightText: Magenta ApS
#
# SPDX-License-Identifier: MPL-2.0
---
# ---------------------------------------------------------------------------
# ---------------------------------------------------------------------------
# Global
variables:
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"
  PRE_COMMIT_HOME: "$CI_PROJECT_DIR/.cache/pre-commit"
  HELM_REPO: https://chartmuseum.magentahosted.dk
  REVIEW_VERSION: 0.0.0-mr$CI_MERGE_REQUEST_IID
  REVIEW_URL: $HELM_REPO/api/charts/os2mo/$REVIEW_VERSION

cache:
  key: "${CI_JOB_NAME}"
  paths:
    - .venv/
    - .cache/pip
    - .cache/pre-commit

stages:
  - lint
  - test
  - review
  - release
  - deploy

workflow:
  rules:
    - if: $CI_COMMIT_TAG
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - if: $CI_MERGE_REQUEST_ID

include:
  - project: 'labs/salt-automation'
    ref: 'master'
    file: '/gitlab-ci-templates/common/autopub.v1.yml'

# ---------------------------------------------------------------------------
# Templates
# ---------------------------------------------------------------------------
.install-deps-template: &install-deps
  before_script:
    # Install pre-commit
    - pip install pre-commit
    # Install yamllint
    - pip install yamllint
    # Install shellcheck
    - apt-get update && apt-get install -y shellcheck
    # Install Helm
    - curl https://baltocdn.com/helm/signing.asc | apt-key add -
    - apt-get update && apt-get install -y apt-transport-https coreutils
    - |-
        echo "deb https://baltocdn.com/helm/stable/debian/ all main" |
        tee /etc/apt/sources.list.d/helm-stable-debian.list
    - apt-get update && apt-get install -y helm

.lint-template: &lint
  <<: *install-deps
  image: python:3.8
  stage: lint

.test-template: &test
  <<: *install-deps
  image: python:3.8
  stage: test

# ---------------------------------------------------------------------------
# Lint
# ---------------------------------------------------------------------------
Lint Project:
  <<: *lint
  script:
    - pre-commit run --all-files

Lint Chart:
  stage: lint
  image: quay.io/helmpack/chart-testing:v3.4.0
  script:
    - ct lint --all --chart-dirs .


# ---------------------------------------------------------------------------
# Test
# ---------------------------------------------------------------------------
Generate Project:
  <<: *test
  script:
    - helm template --kube-version 1.19.11 chart/


Release version:
  stage: release
  needs: []
  image:
    name: alpine/helm:3.7.1
    entrypoint: [""]
  tags:
    - docker
  before_script:
    - helm plugin install https://github.com/chartmuseum/helm-push.git
    - helm repo add magenta-chartmuseum $HELM_REPO
  script:
    - helm cm-push --version=$CI_COMMIT_TAG chart magenta-chartmuseum
  rules:
    - if: $CI_COMMIT_TAG =~ /^(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)$/


pages:
  image: python:3.8
  stage: release
  needs: []
  before_script:
    - pip install mkdocs-material
    - pip install mkdocs-autorefs
  script:
    - mkdocs build --strict --site-dir public
  artifacts:
    paths:
      - public
  rules:
    - if: $CI_COMMIT_TAG =~ /^(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)$/

# Review Stage
##############
deploy_review:
  stage: review
  needs: []
  image:
    name: alpine/helm:3.7.1
    entrypoint: [""]
  tags:
    - docker
  before_script:
    - helm plugin install https://github.com/chartmuseum/helm-push.git
    - helm repo add magenta-chartmuseum $HELM_REPO
  script:
    - helm cm-push --version=$REVIEW_VERSION --force chart magenta-chartmuseum
  environment:
    name: review/$CI_MERGE_REQUEST_IID
    url: "https://www.google.com/"
    on_stop: stop_review
    auto_stop_in: 1 week
  rules:
    - if: $CI_MERGE_REQUEST_ID
      when: manual
      allow_failure: true

stop_review:
  stage: review
  needs: []
  image: alpine:3
  variables:
    GIT_STRATEGY: none # We do not need the source code
  tags:
    - docker
  before_script:
    - apk add curl
  script:
    - curl -X DELETE -u $HELM_REPO_USERNAME:$HELM_REPO_PASSWORD $REVIEW_URL
  environment:
    name: review/$CI_MERGE_REQUEST_IID
    action: stop
  rules:
    - if: $CI_MERGE_REQUEST_ID
      when: manual
      allow_failure: true


# Release stage
###############

Release to Dev:
  stage: deploy
  needs: ["Release version"]
  image: alpine
  variables:
    GIT_STRATEGY: none # We do not need the source code
  rules:
    # Matches <version core> from SemVer 2.0.0 BNF grammar. Ex. 2.3.4, but not 2.3.4-rc
    - if: $CI_COMMIT_TAG =~ /^(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)$/
  tags:
    - docker
  script:
    - apk add git
    - wget https://github.com/mikefarah/yq/releases/download/v4.12.1/yq_linux_amd64 -O /usr/bin/yq
    - chmod +x /usr/bin/yq
    - git config --global user.email "labs@magenta-aps.dk"
    - git config --global user.name "OS2MO Config Updater"
    - git clone https://$DEPLOY_USER:$ACCESS_TOKEN@git.magenta.dk/labs/salt-automation.git
    - cd salt-automation
    - yq e -i '.spec.chart.spec.version = strenv(CI_COMMIT_TAG)' flux/projects/os2mo/config/dev.yaml
    - git add flux/projects/os2mo/config/dev.yaml
    - git commit -m "[cd] Deploy OS2MO Helm Chart $CI_COMMIT_TAG to flux dev servers"
    - git push

Release to Test:
  stage: deploy
  needs: []
  image: alpine
  variables:
    GIT_STRATEGY: none # We do not need the source code
  rules:
    # Only run these on scheduled jobs
    - if: $CI_PIPELINE_SOURCE == "schedule" && $SCHEDULE == "release_to_test"
      when: on_success
    - when: never
  tags:
    - docker
  script:
    - apk add git
    - wget https://github.com/mikefarah/yq/releases/download/v4.12.1/yq_linux_amd64 -O /usr/bin/yq
    - chmod +x /usr/bin/yq
    - git config --global user.email "labs@magenta-aps.dk"
    - git config --global user.name "OS2MO Config Updater"
    - git clone https://$DEPLOY_USER:$ACCESS_TOKEN@git.magenta.dk/labs/salt-automation.git
    - cd salt-automation
    - export DEV_VERSION=$(yq e '.spec.chart.spec.version' flux/projects/os2mo/config/dev.yaml)
    - yq e -i '.spec.chart.spec.version = strenv(DEV_VERSION)' flux/projects/os2mo/config/test.yaml
    - git add flux/projects/os2mo/config/test.yaml
    - git commit -m "[cd] Deploy OS2MO Helm Chart $DEV_VERSION to flux test servers"
    - git push

Release to Prod:
  stage: deploy
  needs: []
  image: alpine
  variables:
    GIT_STRATEGY: none # We do not need the source code
  rules:
    # Only run these on scheduled jobs
    - if: $CI_PIPELINE_SOURCE == "schedule" && $SCHEDULE == "release_to_prod"
      when: on_success
    - when: never
  tags:
    - docker
  script:
    - apk add git
    - wget https://github.com/mikefarah/yq/releases/download/v4.12.1/yq_linux_amd64 -O /usr/bin/yq
    - chmod +x /usr/bin/yq
    - git config --global user.email "labs@magenta-aps.dk"
    - git config --global user.name "OS2MO Config Updater"
    - git clone https://$DEPLOY_USER:$ACCESS_TOKEN@git.magenta.dk/labs/salt-automation.git
    - cd salt-automation
    - export TEST_VERSION=$(yq e '.spec.chart.spec.version' flux/projects/os2mo/config/test.yaml)
    - yq e -i '.spec.chart.spec.version = strenv(TEST_VERSION)' flux/projects/os2mo/config/prod.yaml
    - git add flux/projects/os2mo/config/prod.yaml
    - git commit -m "[cd] Deploy OS2MO Helm Chart $TEST_VERSION to flux prod servers"
    - git push
