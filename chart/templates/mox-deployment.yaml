# SPDX-FileCopyrightText: Magenta ApS
#
# SPDX-License-Identifier: MPL-2.0
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mox-deployment
  labels:
    app: mox
  {{- with .Values.annotations }}
  annotations:
  {{- toYaml . | nindent 4 }}
  {{- end }}
spec:
  replicas: {{ .Values.lora.replicaCount }}
  selector:
    matchLabels:
      app: mox
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: mox
    spec:
      containers:
        - name: mox
          {{- if ne .Values.lora.image.tag "latest" }}
            {{- if and (.Values.lora.probes.enabled) (semverCompare "<3.3.0" .Values.lora.image.tag) }}
              {{- fail "LoRa version must be at least 3.3.0 when probes are enabled" }}
            {{- end }}
          {{- end }}
          image: "{{ .Values.lora.image.repository }}:{{ .Values.lora.image.tag }}"
          imagePullPolicy: {{ .Values.lora.image.pullPolicy }}
          env:
            - name: LORA_AUTH
              value: "false"

            - name: PORT
              value: "8080"

            # gunicorn MAX_WORKERS
            - name: MAX_WORKERS
              value: "{{ .Values.lora.gunicorn.max_workers }}"

            - name: DB_HOST
              value: {{ .Values.database.host }}
            {{ if ne .Values.database.sslmode "" }}
            - name: DB_SSLMODE
              value: {{ .Values.database.sslmode }}
            {{ end }}
            - name: DB_NAME
              value: "mox"
            - name: DB_USER
              value: "mox{{ .Values.database.username_suffix }}"
            - name: DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mox-secret
                  key: db_password
            - name: DB_EXTENSIONS_PATH
              value: "oio_rest/oio_rest/db_extensions/mo-01.json"
          ports:
            - containerPort: 8080
          resources:
            {{- toYaml .Values.lora.resources | nindent 12 }}
          {{- if .Values.lora.probes.enabled }}
          livenessProbe:
            httpGet:
              path: /kubernetes/live
              port: 8080
          readinessProbe:
            httpGet:
              path: /kubernetes/ready
              port: 8080
          startupProbe:
            httpGet:
              path: /kubernetes/ready
              port: 8080
            failureThreshold: {{ .Values.lora.probes.startupProbe.failureThreshold }}
            periodSeconds: {{ .Values.lora.probes.startupProbe.periodSeconds }}
          {{- end }}
      initContainers:
        - name: mox-init
          image: "{{ .Values.lora.init.image.repository }}:{{ .Values.lora.init.image.tag }}"
          imagePullPolicy: {{ .Values.lora.init.image.pullPolicy }}
          env:
            - name: POSTGRES_DB
              value: {{ .Values.database.db }}
            - name: POSTGRES_HOST
              value: {{ .Values.database.host }}
            - name: POSTGRES_USER
              value: "{{ .Values.database.user }}"
            - name: POSTGRES_USER_SUFFIX
              value: "{{ .Values.database.username_suffix }}"
            {{ if ne .Values.database.sslmode "" }}
            - name: POSTGRES_SSL
              value: {{ .Values.database.sslmode }}
            {{ end }}
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  {{ if .Values.database.password_secret }}
                  name: {{ .Values.database.password_secret }}
                  {{ else }}
                  name: mox-db-secret
                  {{ end }}
                  key: db_password

            # The below are intentionally without suffix
            - name: DB_NAME
              value: "mox"
            - name: DB_USER
              value: "mox"
            - name: DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mox-secret
                  key: db_password

            - name: SESSIONS_DB_NAME
              value: "sessions"
            - name: SESSIONS_DB_USER
              value: "sessions"
            - name: SESSIONS_DB_PASSWORD
              value: "sessions"

            - name: CONF_DB_NAME
              value: "mora"
            - name: CONF_DB_USER
              value: "mora"
            - name: CONF_DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mo-secret
                  key: db_password
          resources:
            {{- toYaml .Values.initContainers.resources | nindent 12 }}
        {{ if .Values.fixture }}
        - name: fixture-loader
          image: magentaaps/os2mo-fixture-loader:latest
          args: [ {{ .Values.fixture }} ]
          env:
            - name: PGHOST
              value: {{ .Values.database.host }}
            {{ if ne .Values.database.sslmode "" }}
            - name: PGSSLMODE
              value: {{ .Values.database.sslmode }}
            {{ end }}
            - name: PGDATABASE
              value: "mox"
            - name: PGUSER
              value: "{{ .Values.database.user }}{{ .Values.database.username_suffix }}"
            - name: PGPASSWORD
              valueFrom:
                secretKeyRef:
                  {{ if .Values.database.password_secret }}
                  name: {{ .Values.database.password_secret }}
                  {{ else }}
                  name: mox-db-secret
                  {{ end }}
                  key: db_password
          resources:
            {{- toYaml .Values.initContainers.resources | nindent 12 }}
        {{ end }}
        - name: wait-for-keycloak
          image: curlimages/curl
          command: ["/bin/sh","-c"]
          args: ['echo -e "Waiting for Keycloak to be ready\c"; while [ $(curl -ksw "%{http_code}" "http://keycloak-service:8080/auth/realms/master" -o /dev/null) -ne 200 ]; do sleep 1; echo -e ".\c"; done; echo "OK"']
          resources:
            {{- toYaml .Values.initContainers.resources | nindent 12 }}
      restartPolicy: Always
