# SPDX-FileCopyrightText: Magenta ApS
#
# SPDX-License-Identifier: MPL-2.0
---
{{- if .Values.sd_changed_at.enabled }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: sd-changed-at
  labels:
    app: sd-changed-at
  {{- with .Values.annotations }}
  annotations:
  {{- toYaml . | nindent 4 }}
  {{- end }}
spec:
  selector:
    matchLabels:
      app: sd-changed-at
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: sd-changed-at
    spec:
      containers:
        - name: sd-changed-at
          image: "{{ .Values.sd_changed_at.image.repository }}:{{ .Values.sd_changed_at.image.tag }}"
          imagePullPolicy: {{ .Values.sd_changed_at.image.pullPolicy }}
          env:
            {{- if not .Values.sd_changed_at.sd_global_from_date }}
              {{- fail "SD_GLOBAL_FROM_DATE must be set" }}
            {{- end }}
            {{- if not .Values.sd_changed_at.sd_job_function }}
              {{- fail "SD_JOB_FUNCTION must be set" }}
            {{- end }}
            {{- if not .Values.sd_changed_at.sd_monthly_hourly_divide }}
              {{- fail "SD_MONTHLY_HOURLY_DIVIDE must be set" }}
            {{- end }}
            {{- if not .Values.sd_changed_at.sd_import_run_db }}
              {{- fail "SD_IMPORT_RUN_DB must be set" }}
            {{- end }}
            - name: SD_GLOBAL_FROM_DATE
              value: "{{ .Values.sd_changed_at.sd_global_from_date }}"
            - name: SD_JOB_FUNCTION
              value: "{{ .Values.sd_changed_at.sd_job_function }}"
            - name: SD_MONTHLY_HOURLY_DIVIDE
              value: "{{ .Values.sd_changed_at.sd_monthly_hourly_divide }}"
            - name: SD_IMPORT_RUN_DB
              value: "{{ .Values.sd_changed_at.sd_import_run_db }}"

            - name: MO_URL
              value: "http://mo-service:5000"
            - name: AUTH_SERVER
              value: "http://keycloak-service:8080/auth"
            - name: AUTH_REALM
              value: "mo"
            - name: CLIENT_ID
              value: "dipex"
            - name: CLIENT_SECRET
              valueFrom:
                secretKeyRef:
                  name: keycloak-dipex-secret
                  key: client_secret

            # The three ENVs below require an sd-secret created in Flux

            - name: SD_USER
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.sd_changed_at.sd_secret_name }}
                  key: sd_username
            - name: SD_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.sd_changed_at.sd_secret_name }}
                  key: sd_password
            - name: SD_INSTITUTION_IDENTIFIER
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.sd_changed_at.sd_secret_name }}
                  key: sd_institution
          envFrom:
            - configMapRef:
                name: sd-changed-at
          ports:
            - containerPort: 5000
          resources:
            {{- toYaml .Values.sd_changed_at.resources | nindent 12 }}
          volumeMounts:
            - name: sd-pv
              mountPath: "/mnt/dipex"
      initContainers:
        - name: wait-for-keycloak
          image: curlimages/curl
          command: ["/bin/sh","-c"]
          args: ['while [ $(curl -ksw "%{http_code}" "http://keycloak-service:8080/auth/realms/master" -o /dev/null) -ne 200 ]; do sleep 1; echo "Waiting for Keycloak to be ready"; done; echo "OK"']
          resources:
            {{- toYaml .Values.initContainers.resources | nindent 12 }}
        - name: wait-for-mox
          image: curlimages/curl
          command: ["/bin/sh","-c"]
          args: ['while [ $(curl -ksw "%{http_code}" "http://mox-service:8080/site-map" -o /dev/null) -ne 200 ]; do sleep 1; echo "Waiting for MOX to be ready"; done; echo "OK"']
          resources:
            {{- toYaml .Values.initContainers.resources | nindent 12 }}
        - name: wait-for-mo
          image: curlimages/curl
          command: ["/bin/sh","-c"]
          args: ['while [ $(curl -ksw "%{http_code}" "http://mo-service:5000/" -o /dev/null) -ne 200 ]; do sleep 1; echo "Waiting for MO to be ready"; done; echo "OK"']
          resources:
            {{- toYaml .Values.initContainers.resources | nindent 12 }}
        - name: prepare-run-db
          image: "{{ .Values.dipex.image.repository }}:{{ .Values.dipex.image.tag }}"
          env:
            - name: SD_GLOBAL_FROM_DATE
              value: "{{ .Values.sd_changed_at.sd_global_from_date }}"
          command: ["/bin/bash","-c"]
          args: ['if [ ! -f /mnt/dipex/run_db.sqlite ]; then sqlite3 /mnt/dipex/run_db.sqlite "CREATE TABLE runs (id INTEGER PRIMARY KEY, from_date timestamp, to_date timestamp, status text); INSERT INTO runs VALUES (1, \"${SD_GLOBAL_FROM_DATE}\", \"${SD_GLOBAL_FROM_DATE}\", \"Initializing RunDB\")"; fi']
          resources:
            {{- toYaml .Values.initContainers.resources | nindent 12 }}
          volumeMounts:
            - name: sd-pv
              mountPath: "/mnt/dipex"
      volumes:
        - name: sd-pv
          persistentVolumeClaim:
            claimName: sd-pvc
{{- end }}
